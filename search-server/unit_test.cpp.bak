#include "unit_test.h"

void AssertImpl(bool value, const std::string& expr_str, const std::string& file, const std::string& func, unsigned line,
    const std::string& hint)
{
    using std::string_literals::operator""s;
    if (!value) {
        std::cerr << file << "("s << line << "s): "s << func << ": "s;
        std::cerr << "ASSERT("s << expr_str << "s) failed."s;
        if (!hint.empty()) {
            std::cerr << " Hint: "s << hint;
        }
        std::cerr << std::endl;
        abort();
    }
}

// -------- Начало модульных тестов поисковой системы ----------
// Тест проверяет, что поисковая система исключает стоп-слова при добавлении документов
void TestExcludeStopWordsFromAddedDocumentContent()
{
    using std::string_literals::operator""s;
    const int doc_id = 42;
    const std::string content = "cat in the city"s;
    const std::vector<int> ratings = { 1, 2, 3 };
    {
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.FindTopDocuments("in"s);
        ASSERT_EQUAL(found_docs.size(), 1u);
        const Document& doc0 = found_docs[0];
        ASSERT_EQUAL(doc0.id, doc_id);
    }

    {
        SearchServer server("in the"s);
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        ASSERT_HINT(server.FindTopDocuments("in"s).empty(), "Stop words must be excluded from documents"s);
    }
}

// Тест проверяет что поисковая система исключает из выдачи документы со стоп словами
void TestMinusWordsExcludeDocumentFromQuery(void)
{
    using std::string_literals::operator""s;
    SearchServer server;

    server.AddDocument(0, "Hello world"s, DocumentStatus::ACTUAL, { 5, 3, 10 }); // Avarage rating = 6
    server.AddDocument(1, "The second world"s, DocumentStatus::ACTUAL, { -10, -15, -20 }); // Avarage rating = -15
    server.AddDocument(2, "Third doc in server"s, DocumentStatus::ACTUAL, { 1, 0, 0 }); // Avarage rating = 0
    server.AddDocument(3, "Another document in server"s, DocumentStatus::ACTUAL, { 1, 2, 3 }); // Avarage rating = 2

    std::vector<struct Document> document = server.FindTopDocuments("-Hello world"s);
    int i = 0;
    ASSERT_EQUAL(document[i].id, 1);
    ASSERT_EQUAL(document[i].rating, -15);
    ASSERT_EQUAL(document[i].relevance, 0.23104906018664842);
    ASSERT_EQUAL_HINT(document.size(), 1u, "Только 1 документ должен быть найден"s);
    document.clear();

    document = server.FindTopDocuments("Hello -world"s);
    ASSERT_HINT(document.empty(), "Не должно быть найденных документов"s);
    document.clear();

    try
    {
        document = server.FindTopDocuments("Hello - world"s);
        ASSERT_HINT(false, "Должно было сработать исключение"s);
    }
    catch (const std::exception&)
    {
    }
    try
    {
        document = server.FindTopDocuments("Hello world -"s);
        ASSERT_HINT(false, "Должно было сработать исключение"s);
    }
    catch (const std::exception&)
    {
    }
}

// Тест проверки метода Matching
void TestMatchingDocuments(void)
{
    using std::string_literals::operator""s;
    SearchServer server;

    server.AddDocument(0, "Hello world"s, DocumentStatus::ACTUAL, { 5, 3, 10 }); // Avarage rating = 6
    server.AddDocument(1, "The second world"s, DocumentStatus::ACTUAL, { -10, -15, -20 }); // Avarage rating = -15
    server.AddDocument(2, "Third doc in server"s, DocumentStatus::BANNED, { 1, 0, 0 }); // Avarage rating = 0
    server.AddDocument(3, "Another document in server"s, DocumentStatus::IRRELEVANT, { 1, 2, 3 }); // Avarage rating = 2
    server.AddDocument(4, "Removed doc in server"s, DocumentStatus::REMOVED, { 3, 10, 20 }); // Avarage rating = 11

    std::tuple<std::vector<std::string>, DocumentStatus> testTuple;
    std::tuple<std::vector<std::string>, DocumentStatus> testMatching = server.MatchDocument(""s, 0);

    ASSERT(testMatching == testTuple);
    std::vector<std::string> blankvectorOfWords;

    testMatching = server.MatchDocument("Test query"s, 0);
    ASSERT(testMatching == testTuple);

    {// Тест пустого возврата при нахождении минус слова и верного статуса
        testMatching = server.MatchDocument("second the -world"s, 1);
        testTuple = { blankvectorOfWords, DocumentStatus::ACTUAL };
        ASSERT(testMatching == testTuple);

        testMatching = server.MatchDocument("third -in doc"s, 2);
        testTuple = { blankvectorOfWords, DocumentStatus::BANNED };
        ASSERT(testMatching == testTuple);

        testMatching = server.MatchDocument("-Another document"s, 3);
        testTuple = { blankvectorOfWords, DocumentStatus::IRRELEVANT };
        ASSERT(testMatching == testTuple);

        testMatching = server.MatchDocument("server -Removed"s, 4);
        testTuple = { blankvectorOfWords, DocumentStatus::REMOVED };
        ASSERT(testMatching == testTuple);
    }

    {// Тест возврата слов и статусов
        testMatching = server.MatchDocument("second The"s, 1);
        testTuple = { {"The"s, "second"s}, DocumentStatus::ACTUAL };
        ASSERT(testMatching == testTuple);

        testMatching = server.MatchDocument("Third in doc"s, 2);
        testTuple = { {"Third"s, "doc"s, "in"s}, DocumentStatus::BANNED };
        ASSERT(testMatching == testTuple);

        testMatching = server.MatchDocument("Another document"s, 3);
        testTuple = { {"Another"s, "document"s}, DocumentStatus::IRRELEVANT };
        ASSERT(testMatching == testTuple);

        testMatching = server.MatchDocument("server Removed"s, 4);
        testTuple = { {"Removed"s, "server"s}, DocumentStatus::REMOVED };
        ASSERT(testMatching == testTuple);
    }
}

// Тест выдачи релевантности запроса
void TestSortingDocumentsWithRelevance(void)
{
    using std::string_literals::operator""s;
    SearchServer server;
    std::vector<std::string> documents = { "first document at server excel"s, "second document in system word"s, "third document of database adobe"s, "fourth document on configuration photoshop"s, "fifth document at test windows"s, "sixth document in server office"s, "seventh document of system linux"s, "eighth document on database plm"s, "ninth document at configuration cad"s, "tenth document in test solidworks"s, "eleventh document of server compas"s, "twelfth document on system excel"s, "thirteenth document at database word"s, "fourteenth document in configuration adobe"s, "fifteenth document of test photoshop"s, "sixteenth document on server windows"s };

    for (size_t i = 0; i < 16; i++)
        server.AddDocument(static_cast<int>(i), documents[i], DocumentStatus::ACTUAL, { 5, 7, 9 });

    std::vector<Document> result = server.FindTopDocuments("excel word document in windows at execute some programms"s);
    int doc_size = static_cast<int>(result.size()) - 1;
    for (int i = 0; i < doc_size - 1; ++i) {
        ASSERT_HINT(result[i].relevance >= result[i + 1].relevance, "Неверная сортировка реливантности документа, i документ не может иметь релевантность меньше нижестоящего"s);
    }
}

// Тест проверки добавления документа
void TestAddDocument(void)
{
    using std::string_literals::operator""s;
    SearchServer server;

    server.AddDocument(0, "Hello world"s, DocumentStatus::ACTUAL, { 5, 3, 10 }); // Avarage rating = 6
    server.AddDocument(1, "The second world"s, DocumentStatus::ACTUAL, { -10, -15, -20 }); // Avarage rating = -15
    server.AddDocument(2, "Third doc in server"s, DocumentStatus::ACTUAL, { 1, 0, 0 }); // Avarage rating = 0
    server.AddDocument(3, "Another document in server"s, DocumentStatus::ACTUAL, { 1, 2, 3 }); // Avarage rating = 2

    {
        std::vector<Document> result = server.FindTopDocuments("Hello"s);
        std::vector<Document> testingRes;
        testingRes.push_back({ 0, 0.69314718055994529, 6 });
        ASSERT(testingRes.front().id == result.front().id &&
            testingRes.front().relevance == result.front().relevance &&
            testingRes.front().rating == result.front().rating);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("second"s);
        std::vector<Document> testingRes;
        testingRes.push_back({ 1, 0.46209812037329684, -15 });
        ASSERT(testingRes.front().id == result.front().id &&
            testingRes.front().relevance == result.front().relevance &&
            testingRes.front().rating == result.front().rating);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("doc"s);
        std::vector<Document> testingRes;
        testingRes.push_back({ 2, 0.34657359027997264, 0 });
        ASSERT(testingRes.front().id == result.front().id &&
            testingRes.front().relevance == result.front().relevance &&
            testingRes.front().rating == result.front().rating);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("Another document"s);
        std::vector<Document> testingRes;
        testingRes.push_back({ 3, 0.69314718055994529, 2 });
        ASSERT(testingRes.front().id == result.front().id &&
            testingRes.front().relevance == result.front().relevance &&
            testingRes.front().rating == result.front().rating);
    }
    server.AddDocument(55, "Another correct document in server"s, DocumentStatus::ACTUAL, { 1, 2, 3 }); // Avarage rating = 2

    try
    {// Тест добавления документа с уже имеющимся id
        server.AddDocument(55, "Another incorrect document in server"s, DocumentStatus::ACTUAL, { 1, 2, 3 }); // Avarage rating = 2
        ASSERT_HINT(false, "Должно было сработать исключение при добавлении документа с дублирующимся id"s);
    }
    catch (const std::exception&)
    {
    }

    try
    {
        server.AddDocument(-42, "Another incorrect document in server"s, DocumentStatus::ACTUAL, { 1, 2, 3 }); // Avarage rating = 2
        ASSERT_HINT(false, "Должно было сработать исключение при добавлении документа с отрицательным id"s);
    }
    catch (const std::exception&)
    {
    }

    try
    {
        server.AddDocument(42, "Another incorrect document in server -"s, DocumentStatus::ACTUAL, { 1, 2, 3 }); // Avarage rating = 2
        ASSERT_HINT(false, "Должно было сработать исключение при добавлении документа с некорректным стоп-словом"s);
    }
    catch (const std::exception&)
    {
    }

    try
    {
        server.AddDocument(442, "Another incorrect document in --server"s, DocumentStatus::ACTUAL, { 1, 2, 3 }); // Avarage rating = 2
        ASSERT_HINT(false, "Должно было сработать исключение при добавлении документа с некорректным стоп-словом"s);
    }
    catch (const std::exception&)
    {
    }

    try
    {
        server.AddDocument(1000, "Another correct document-- in server"s, DocumentStatus::ACTUAL, { 1, 2, 3 }); // Avarage rating = 2
    }
    catch (const std::exception&)
    {
        ASSERT_HINT(false, "Не должно было сработать исключение при добавлении документа"s);
    }
}

// Проверка возврата правильного статуса документа
void TestDocumentStatus(void)
{
    using std::string_literals::operator""s;
    SearchServer server;

    server.AddDocument(0, "Hello world"s, DocumentStatus::ACTUAL, { 5, 3, 10 }); // Avarage rating = 6
    server.AddDocument(1, "The second world"s, DocumentStatus::BANNED, { -10, -15, -20 }); // Avarage rating = -15
    server.AddDocument(2, "Third doc in server"s, DocumentStatus::IRRELEVANT, { 1, 0, 0 }); // Avarage rating = 0
    server.AddDocument(3, "Another document in server"s, DocumentStatus::REMOVED, { 1, 2, 3 }); // Avarage rating = 2

    {
        std::vector<Document> result = server.FindTopDocuments("Hello"s, DocumentStatus::ACTUAL);
        std::vector<Document> testingRes;
        testingRes.push_back({ 0, 0.69314718055994529, 6 });
        ASSERT(testingRes.front().id == result.front().id &&
            testingRes.front().relevance == result.front().relevance &&
            testingRes.front().rating == result.front().rating);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("second"s, DocumentStatus::BANNED);
        std::vector<Document> testingRes;
        testingRes.push_back({ 1, 0.46209812037329684, -15 });
        ASSERT(testingRes.front().id == result.front().id &&
            testingRes.front().relevance == result.front().relevance &&
            testingRes.front().rating == result.front().rating);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("doc"s, DocumentStatus::IRRELEVANT);
        std::vector<Document> testingRes;
        testingRes.push_back({ 2, 0.34657359027997264, 0 });
        ASSERT(testingRes.front().id == result.front().id &&
            testingRes.front().relevance == result.front().relevance &&
            testingRes.front().rating == result.front().rating);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("Another document"s, DocumentStatus::REMOVED);
        std::vector<Document> testingRes;
        testingRes.push_back({ 3, 0.69314718055994529, 2 });
        ASSERT(testingRes.front().id == result.front().id &&
            testingRes.front().relevance == result.front().relevance &&
            testingRes.front().rating == result.front().rating);
    }
}

void TestRatingCalculation(void)
{
    using std::string_literals::operator""s;
    SearchServer server;
    std::vector<int> test1 = { 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3 };
    std::vector<int> test2 = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178 };
    std::vector<int> test3 = { -1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35, -37, -39, -41, -43, -45, -47, -49, -51, -53, -55, -57, -59, -61, -63, -65, -67, -69, -71, -73, -75, -77, -79, -81, -83, -85, -87, -89, -91, -93, -95, -97, -99, -101, -103, -105, -107, -109, -111, -113, -115, -117, -119, -121, -123, -125, -127, -129, -131, -133, -135, -137, -139, -141, -143, -145, -147, -149, -151, -153, -155, -157, -159, -161, -163, -165, -167, -169, -171, -173, -175, -177 };
    std::vector<int> test4 = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, -21, -23, -25, -27, -29, -31, -33, -35, -37, -39, -41, -43, -45, -47, -49, -51, -53, -55, -57, -59, -61, -63, -65, -67, -69, 4, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3 };

    server.AddDocument(0, "Hello world"s, DocumentStatus::ACTUAL, test1);
    server.AddDocument(1, "The second world"s, DocumentStatus::BANNED, test2);
    server.AddDocument(2, "Third doc in server"s, DocumentStatus::IRRELEVANT, test3);
    server.AddDocument(3, "Another document in server"s, DocumentStatus::REMOVED, test4);

    {
        std::vector<Document> result = server.FindTopDocuments("Hello"s, DocumentStatus::ACTUAL);
        ASSERT_EQUAL(result.front().rating, 2);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("second"s, DocumentStatus::BANNED);
        ASSERT_EQUAL(result.front().rating, 90);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("doc"s, DocumentStatus::IRRELEVANT);
        ASSERT_EQUAL(result.front().rating, -89);
    }

    {
        std::vector<Document> result = server.FindTopDocuments("Another document"s, DocumentStatus::REMOVED);
        ASSERT_EQUAL(result.front().rating, -4);
    }
}

// Тест корректного вычисления релевантности найденных документов.
void TestCorrectRelevance(void)
{
    using std::string_literals::operator""s;
    SearchServer server;
    std::vector<std::string> documents = { "first document at server excel"s, "second document in system word"s, "third document of database adobe"s, "fourth document on configuration photoshop"s, "fifth document at test windows"s, "sixth document in server office"s, "seventh document of system linux"s, "eighth document on database plm"s, "ninth document at configuration cad"s, "tenth document in test solidworks"s, "eleventh document of server compas"s, "twelfth document on system excel"s, "thirteenth document at database word"s, "fourteenth document in configuration adobe"s, "fifteenth document of test photoshop"s, "sixteenth document on server windows"s };

    for (size_t i = 0; i < 16; i++)
    {
        std::vector<int> ratingVec = { 10 };
        for (size_t j = 0; j < i; j++)
        {
            ratingVec.push_back(((j + 1) * (i + 3) % 100));
        }
        server.AddDocument(static_cast<int>(i), documents[i], DocumentStatus::ACTUAL, ratingVec);
    }
    std::vector<Document> result = server.FindTopDocuments("excel word document in"s, DocumentStatus::ACTUAL);
    ASSERT_EQUAL(result[0].relevance, 0.69314718055994529);
    ASSERT_EQUAL(result[1].relevance, 0.41588830833596718);
    ASSERT_EQUAL(result[2].relevance, 0.41588830833596718);
    ASSERT_EQUAL(result[3].relevance, 0.41588830833596718);
    ASSERT_EQUAL(result[4].relevance, 0.27725887222397810);
}

// Тест Сортировка найденных документов по релевантности. Возвращаемые при поиске документов результаты должны быть отсортированы в порядке убывания
void TestCorrectOrderRelevance(void)
{
    using std::string_literals::operator""s;
    SearchServer server;
    std::vector<std::string> documents = { "first document at server excel with some programms"s, "second document in system word and some execute files"s, "third document of database adobe"s, "fourth document on configuration photoshop"s, "fifth document at test windows"s, "sixth document in server office"s, "seventh document of system linux"s, "eighth document on database plm"s, "ninth document at configuration cad"s, "tenth document in test solidworks"s, "eleventh document of server compas"s, "twelfth document on system excel"s, "thirteenth document at database word"s, "fourteenth document in configuration adobe"s, "fifteenth document of test photoshop"s, "sixteenth document on server windows"s };

    for (size_t i = 0; i < 16; i++)
    {
        std::vector<int> ratingVec = { 10 };
        for (size_t j = 0; j < i; j++)
        {
            ratingVec.push_back(((j + 1) * (i + 3) % 100));
        }
        server.AddDocument(static_cast<int>(i), documents[i], DocumentStatus::ACTUAL, ratingVec);
    }

    std::vector<Document> result = server.FindTopDocuments("excel word document in windows at execute some programms", DocumentStatus::ACTUAL);

    int doc_size = static_cast<int>(result.size()) - 1;
    for (int i = 0; i < doc_size - 1; ++i) {
        ASSERT_HINT(result[i].relevance >= result[i + 1].relevance, "Неверная сортировка реливантности документа, i документ не может иметь релевантность меньше нижестоящего"s);
    }
}

// Тест Фильтрация результатов поиска с использованием предиката, задаваемого пользователем.
void TestPredacateWorks(void)
{
    using std::string_literals::operator""s;
    SearchServer server;
    std::vector<std::string> documents = { "first document at server excel with some programms"s, "second document in system word and some execute files"s, "third document of database adobe"s, "fourth document on configuration photoshop"s, "fifth document at test windows"s, "sixth document in server office"s, "seventh document of system linux"s, "eighth document on database plm"s, "ninth document at configuration cad"s, "tenth document in test solidworks"s, "eleventh document of server compas"s, "twelfth document on system excel"s, "thirteenth document at database word"s, "fourteenth document in configuration adobe"s, "fifteenth document of test photoshop"s, "sixteenth document on server windows"s };

    for (size_t i = 0; i < 16; i++)
    {
        std::vector<int> ratingVec = { 10 };
        for (size_t j = 0; j < i; j++)
        {
            ratingVec.push_back(((j + 1) * (i + 3) % 100));
        }
        server.AddDocument(static_cast<int>(i), documents[i], DocumentStatus::ACTUAL, ratingVec);
    }

    std::vector<Document> result;
    {
        result = server.FindTopDocuments("excel word document in windows at execute some programms"s,
            [](int document_id, DocumentStatus status, int rating)
            {
                return document_id % 2 == 0;
            });

        int arrId[] = { 0, 12, 4, 8, 14 };
        for (size_t i = 0; i < 5; i++)
        {
            ASSERT_EQUAL_HINT(result[i].id, arrId[i], "Неверный ID документа при предикатном поиске"s);
        }

        int arrRating[] = { 10, 44, 16, 45, 39 };
        for (size_t i = 0; i < 5; i++)
        {
            ASSERT_EQUAL_HINT(result[i].rating, arrRating[i], "Неверный рейтинг при предикатном поиске"s);
        }

        double arrRelevance[] = { 1.0397207708399179, 0.69314718055994529, 0.69314718055994529, 0.27725887222397810, 0.0000000000000000 };
        for (size_t i = 0; i < 5; i++)
        {
            ASSERT_EQUAL_HINT(result[i].relevance, arrRelevance[i], "Неверная релевантность при предикатном поиске"s);
        }
    }

    {
        result = server.FindTopDocuments("excel word document in windows at execute some programms",
            [](int document_id, DocumentStatus status, int rating)
            {
                return rating > 35;
            });

        int arrId[] = { 12, 15, 11, 13, 8 };
        for (size_t i = 0; i < 5; i++)
        {
            ASSERT_EQUAL_HINT(result[i].id, arrId[i], "Неверный ID документа при предикатном поиске"s);
        }

        int arrRating[] = { 44, 48, 44, 47, 45 };
        for (size_t i = 0; i < 5; i++)
        {
            ASSERT_EQUAL_HINT(result[i].rating, arrRating[i], "Неверный рейтинг при предикатном поиске"s);
        }

        double arrRelevance[] = { 0.69314718055994529, 0.41588830833596718, 0.41588830833596718, 0.27725887222397810, 0.27725887222397810 };
        for (size_t i = 0; i < 5; i++)
        {
            ASSERT_EQUAL_HINT(result[i].relevance, arrRelevance[i], "Неверная релевантность при предикатном поиске"s);
        }
    }
}
void TestCreateServerWithStopWords(void)
{
    using std::string_literals::operator""s;
    {// минус в конце
        try
        {
            SearchServer server("Bad minus words in the end -"s);
            ASSERT_HINT(false, "Должно было сработать исключение"s);
        }
        catch (const std::exception&)
        {
        }
    }

    {// минус в середине
        try
        {
            SearchServer server("Bad minus - words in the middle"s);
            ASSERT_HINT(false, "Должно было сработать исключение"s);
        }
        catch (const std::exception&)
        {
        }
    }

    {// минус в начале
        try
        {
            SearchServer server("- Bad minus words at the start"s);
            ASSERT_HINT(false, "Должно было сработать исключение"s);
        }
        catch (const std::exception&)
        {
        }
    }

    {// минус c двойным --
        try
        {
            SearchServer server("Bad minus with double --word"s);
            ASSERT_HINT(false, "Должно было сработать исключение"s);
        }
        catch (const std::exception&)
        {
        }
    }

    {// минус c двойным -- корректным
        try
        {
            SearchServer server("Good minus with double-- word"s);
        }
        catch (const std::exception&)
        {
            ASSERT_HINT(false, "Не должно было сработать исключение"s);
        }
    }

    {// минус c двойным -- корректным
        try
        {
            SearchServer server("Good minus with dou-ble word"s);
        }
        catch (const std::exception&)
        {
            ASSERT_HINT(false, "Не должно было сработать исключение"s);
        }
    }
}

// Функция TestSearchServer является точкой входа для запуска тестов
void TestSearchServer() {
    RUN_TEST(TestCreateServerWithStopWords);
    RUN_TEST(TestAddDocument);
    RUN_TEST(TestExcludeStopWordsFromAddedDocumentContent);
    RUN_TEST(TestMinusWordsExcludeDocumentFromQuery);
    RUN_TEST(TestMatchingDocuments);
    RUN_TEST(TestSortingDocumentsWithRelevance);
    RUN_TEST(TestDocumentStatus);
    RUN_TEST(TestRatingCalculation);
    RUN_TEST(TestCorrectRelevance);
    RUN_TEST(TestCorrectOrderRelevance);
    RUN_TEST(TestPredacateWorks);
}
// --------- Окончание модульных тестов поисковой системы -----------